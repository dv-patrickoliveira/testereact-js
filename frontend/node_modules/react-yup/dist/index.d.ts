/// <reference types="prop-types" />
/// <reference types="react" />

import * as React from 'react';
import { Schema, ValidationError } from 'yup';

export declare type InnerValueState<T> = T extends string | number | boolean | undefined | Function | Date ? T : {
	[P in keyof T]?: InnerValueState<T[P]>;
};
export declare type ValueState<T> = {
	[Key in keyof T]?: InnerValueState<T[Key]>;
};
export declare type LeafsToType<T, N> = T extends string | number | boolean | Date ? N : {
	[P in keyof T]?: LeafsToType<T[P], N>;
};
export declare type TouchedState<T> = LeafsToType<T, boolean>;
export declare type ErrorState<T> = LeafsToType<T, string>;
export declare type FocusMapperCallback = (yupErrors: ValidationError) => HTMLElement | undefined;
declare const focusFirstError: (form: HTMLFormElement, yupErrors: ValidationError, focusMapper?: Record<string, string | FocusMapperCallback>) => void;
export interface UseFormHookOptions<FormValues extends Record<string, unknown>> {
	defaultValues?: ValueState<FormValues> | (() => ValueState<FormValues>);
	defaultErrors?: ErrorState<FormValues> | (() => ErrorState<FormValues>);
	defaultTouched?: TouchedState<FormValues> | (() => TouchedState<FormValues>);
	validationSchema?: Schema<FormValues>;
	submitFocusError?: boolean;
	focusMapper?: Parameters<typeof focusFirstError>[2];
}
export declare type CreateSubmitHandler<FormValues> = (onSuccess: (values: ValueState<FormValues>) => void, onError?: ((errors: ErrorState<FormValues>, values: ValueState<FormValues>, yupErrors: ValidationError) => void) | undefined) => (event: React.FormEvent<HTMLElement>) => void;
export declare type Field = {
	onBlur: (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
	onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
};
export declare type SetValue = (name: string, value: unknown, shouldValidate?: boolean) => void;
export declare type SetValues<FormValues> = (callback: (values: ValueState<FormValues>) => ValueState<FormValues>, shouldValidate?: boolean) => void;
export declare type SetTouched<FormValues> = {
	(callback: (touched: TouchedState<FormValues>) => TouchedState<FormValues>, shouldValidate?: boolean, _?: never): void;
	(name: string, value: boolean, shouldValidate?: boolean): void;
};
export interface ValidateFormOptions {
	touch?: boolean;
}
export declare type ValidateFormResult<FormValues> = Promise<{
	values: ValueState<FormValues>;
	errors?: ErrorState<FormValues>;
	yupErrors?: ValidationError;
}>;
export declare type IsChecked = {
	(name: string, value: (curValue: any) => boolean): boolean;
	(name: string, value?: undefined): boolean;
	(name: string, value: any): boolean;
};
export interface FormBagContext<FormValues> {
	createSubmitHandler: CreateSubmitHandler<FormValues>;
	field: Field;
	getError: {
		(name: string): string | undefined;
		(callback: (errors: ErrorState<FormValues>) => string | undefined): string | undefined;
	};
	getErrors: () => ErrorState<FormValues>;
	getValue: {
		(name: string): unknown;
		<R>(callback: (values: ValueState<FormValues>) => R | undefined): R | undefined;
	};
	getValues: () => ValueState<FormValues>;
	getTouched: () => TouchedState<FormValues>;
	isTouched: {
		(name: string): boolean;
		(callback: (touched: TouchedState<FormValues>) => undefined | boolean): undefined | boolean;
	};
	isChecked: IsChecked;
	setSubmitting: (isSubmitting: boolean) => void;
	setDirty: (isDirty: boolean) => void;
	setTouched: SetTouched<FormValues>;
	setValue: SetValue;
	setValues: SetValues<FormValues>;
	resetErrors: () => void;
	validateForm: (options?: ValidateFormOptions) => ValidateFormResult<FormValues>;
	validateField: (name: string, values: ValueState<FormValues>, shouldTouch?: boolean) => Promise<unknown>;
}
export interface UseFormHookResult<FormValues> extends FormBagContext<FormValues> {
	values: ValueState<FormValues>;
	errors: ErrorState<FormValues>;
	touched: TouchedState<FormValues>;
	isValid: boolean;
	isSubmitting: boolean;
	isDirty: boolean;
	FormProvider: ({ children }: {
		children: React.ReactNode;
	}) => JSX.Element;
}
declare const FormBagContext: React.Context<FormBagContext<unknown>>;
export declare const useForm: <FormValues extends Record<string, unknown>>(options?: UseFormHookOptions<FormValues>) => UseFormHookResult<FormValues>;
export declare const useFormBag: <FormValues extends Record<string, unknown>>() => FormBagContext<FormValues>;

export {};
